from __future__ import annotations
from os.path import isfile
from typing import Tuple, List
from datetime import datetime

class UVVisSpectrum:
    """
    The UVVisSpectrum class allows the manipulation of UV-Visible data originated from experimental
    measurements. The class provides a standard constructor returning an empty object and a series
    of classmethods designed to parse specific file formats.
    """
    def __init__(self) -> None:
        self.__timestamp: datetime = None
        self.__wavelength: List[float] = []
        self.__absorbance: List[float] = []
    
    @property
    def timestamp(self) -> datetime:
        """
        The time at which the measurement has been started.

        Returns
        -------
        datetime
            The datetime object encoding the time at which the measurement has been started.
        """
        return self.__timestamp

    @property
    def wavelength(self) -> List[float]:
        """
        The wavelength values in nanometers associated with each datapoint.

        Returns
        -------
        List[float]
            The list of float values encoding the wavelength, in nanometers, associated with each datapoint.
        """
        return self.__wavelength
    
    @property
    def absorbance(self) -> List[float]:
        """
        The absorbance values associated with each datapoint.

        Returns
        -------
        List[float]
            The list of float values encoding absorbance associated with each datapoint.
        """
        return self.__absorbance

    @classmethod
    def from_JASCO_ASCII(cls, path: str) -> UVVisSpectrum:
        """
        The classmethod designed to parse ASCII data files generated by JASCO instruments.

        Arguments
        ---------
        path: str
            The path to the ASCII file encoding the experimental measurements.

        Raises:
        -------
        RuntimeError
            Exception raised if the file does not exist or if it cannot be properly parsed.
        """

        if not isfile(path):
            raise RuntimeError(f"The specified file '{path}' does not exist.")
        
        obj = cls()

        with open(path, 'r') as file:

            npt, xunits, yunits = None, None, None

            for line in file:

                if "XUNITS" in line:
                    xunits = line.split('\t')[-1].strip("\n")
                
                if "YUNITS" in line:
                    yunits = line.split('\t')[-1].strip("\n")

                if "DATE" in line:
                    date_str = line.split('\t')[-1].strip('\n')
                    date_str += " "
                    date_str += file.readline().split('\t')[-1].strip('\n')
                    obj.__timestamp = datetime.strptime(date_str, '%y/%m/%d %H:%M:%S')

                if "NPOINTS" in line:
                    npt = int(line.split('\t')[-1])

                if "XYDATA" in line:
                    for _ in range(npt):
                        data = file.readline().split('\t')

                        xvalue, yvalue = float(data[0]), float(data[1])

                        if xunits == "NANOMETERS":
                            obj.__wavelength.append(xvalue)
                        else:
                            raise RuntimeError(f"Cannot parse unit {xunits}.")
                        
                        if yunits == "ABSORBANCE":
                            obj.__absorbance.append(yvalue)
                        else:
                            raise RuntimeError(f"Cannot parse unit {yunits}.")
        
        return obj
    
    def __getitem__(self, i: int) -> Tuple[float, float]:
        if i<0 or i>=len(self):
            raise ValueError("Index out of bounds")

        return self.__wavelength[i], self.__absorbance[i]
        
    def __iter__(self) -> Tuple[float, float]:
        for w, a in zip(self.__wavelength, self.__absorbance):
            yield w, a

    def __len__(self) -> int:
        return len(self.__wavelength)
    


